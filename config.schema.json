{
    "pluginAlias": "BlindsHTTP",
    "pluginType": "accessory",
    "singular": false,
    "headerDisplay": "Find the full documentation and report bugs [here](https://github.com/dxdc/homebridge-blinds).",
    "schema": {
        "type": "object",
        "properties": {
            "name": {
                "title": "Name",
                "type": "string",
                "required": true
            },
            "up_url": { "$ref": "#/$defs/http_options" },
            "down_url": { "$ref": "#/$defs/http_options" },
            "motion_time": {
                "title": "Motion Time",
                "type": "integer",
                "placeholder": 10000,
                "minimum": 1,
                "description": "Milliseconds for blinds to move completely up or down"
            },
            "motion_time_graph": {
                "title": "Motion Time Mapping (optional)",
                "type": "object",
                "expandable": true,
                "properties": {
                    "up": {
                        "$ref": "#/$defs/motion_graph_entry"
                    },
                    "down": {
                        "$ref": "#/$defs/motion_graph_entry"
                    }
                },
                "description": "Overrides default motion time using a mapping of blind position as a function of seconds. For instance: @ 0.0 seconds, pos = 0; @ 9.7 seconds, pos = 50; @ 14.3 seconds, pos = 100. Minimally, add a time for position = 0 and position = 100."
            },
            "show_toggle_button": {
                "title": "Show Toggle (up/down) Button",
                "type": "boolean"
            },
            "stop_url": { "$ref": "#/$defs/http_options" },
            "use_same_url_for_stop": {
                "title": "Use Same URL for Stop",
                "type": "boolean",
                "description": "Instead of using the STOP url, just re-send the UP or DOWN url"
            },
            "show_stop_button": {
                "title": "Show Stop Button",
                "type": "boolean"
            },
            "trigger_stop_at_boundaries": {
                "title": "Send Stop at Boundaries",
                "type": "boolean",
                "description": "Only needed if blinds do not stop automatically"
            },
            "pos_url": {
                "title": "Position URL",
                "type": "string",
                "description": "URL to get the current blinds position (must be 0-100 response)",
                "placeholder": "http://1.2.3.4/window/position",
                "format": "uri"
            },
            "pos_poll_ms": {
                "title": "Polling interval for Position URL",
                "type": "integer",
                "description": "Milliseconds between polling requests to position URL",
                "minimum": 5000,
                "placeholder": 15000
            },
            "pos_jsonata": {
                "title": "JSONata for Position URL",
                "type": "string",
                "description": "Expression to parse position URL response",
                "placeholder": "ShutterPosition1"
            },
            "send_pos_jsonata": {
                "title": "JSONata for Target Position",
                "type": "string",
                "description": "Expression to map target position (optional)",
                "placeholder": "$round( ( 100 - $number($) ) * 255 / 100 )"
            },
            "response_lag_ms": {
                "title": "Response Lag",
                "type": "integer",
                "placeholder": 0,
                "minimum": 0,
                "description": "Milliseconds for device to respond after HTTP request. Improves accuracy for non-boundary positions due to network or motor lag."
            },
            "http_success_codes": {
                "type": "array",
                "notitle": true,
                "uniqueItems": true,
                "displayFlex": true,
                "flex-direction": "row",
                "items": {
                    "type": "integer",
                    "placeholder": 200,
                    "minimum": 1
                }
            },
            "show_favorite_buttons": {
                "type": "array",
                "notitle": true,
                "uniqueItems": true,
                "displayFlex": true,
                "flex-direction": "row",
                "items": {
                    "type": "integer",
                    "title": "Position (0 = closed, 100 = open)",
                    "placeholder": 50,
                    "minimum": 0,
                    "maximum": 100
                }
            },
            "webhook_port": {
                "title": "Port",
                "type": "integer",
                "placeholder": 51828,
                "minimum": 1
            },
            "webhook_http_auth_user": {
                "title": "Username",
                "type": "string"
            },
            "webhook_http_auth_pass": {
                "title": "Password",
                "type": "string"
            },
            "webhook_https": {
                "title": "Use SSL",
                "type": "boolean"
            },
            "webhook_https_keyfile": {
                "title": "Path To Private Key",
                "type": "string"
            },
            "webhook_https_certfile": {
                "title": "Path To Certificate",
                "type": "string"
            },
            "unique_serial": {
                "title": "Unique serial",
                "type": "boolean",
                "description": "UUID-based serial/model number instead of default 'BlindsHTTPAccessory'"
            },
            "verbose": {
                "title": "Verbose logging",
                "type": "boolean"
            }
        },
        "$defs": {
            "motion_graph_entry": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "pos": {
                            "title": "Position (0 = closed, 100 = open)",
                            "type": "integer",
                            "placeholder": 0,
                            "minimum": 0,
                            "maximum": 100,
                            "required": true
                        },
                        "seconds": {
                            "title": "Seconds",
                            "type": "number",
                            "minimum": 0,
                            "placeholder": 0.0,
                            "required": true
                        }
                    }
                }
            },
            "http_options": {
                "type": "object",
                "properties": {
                    "url": {
                        "title": "URL",
                        "type": "string",
                        "placeholder": "http://1.2.3.4/window/cmnd",
                        "format": "uri"
                    },
                    "method": {
                        "title": "HTTP Method",
                        "type": "string",
                        "placeholder": "POST",
                        "oneOf": [
                            { "title": "GET", "type": "string" },
                            { "title": "POST", "type": "string" },
                            { "title": "PUT", "type": "string" },
                            { "title": "PATCH", "type": "string" },
                            { "title": "DELETE", "type": "string" }
                        ],
                        "typeahead": {
                            "source": ["GET", "POST", "PUT", "PATCH", "DELETE"]
                        }
                    },
                    "headers": {
                        "type": "object",
                        "title": "Headers",
                        "properties": {
                            "Authorization": {
                                "type": "string"
                            },
                            "BOND-Token": {
                                "type": "string"
                            }
                        }
                    },
                    "body": {
                        "title": "HTTP Body",
                        "type": "string"
                    },
                    "maxAttempts": {
                        "title": "Maximum HTTP attempts",
                        "type": "integer",
                        "minimum": 1,
                        "placeholder": 5
                    },
                    "retryDelay": {
                        "title": "Delay (ms) between HTTP attempts",
                        "type": "integer",
                        "minimum": 0,
                        "placeholder": 2000
                    }
                }
            }
        }
    },
    "layout": [
        "name",
        {
            "title": "HTTP Success Codes",
            "description": "List of HTTP codes indicating a successful API request (200, 204, etc.)",
            "expandable": true,
            "type": "fieldset",
            "items": [
                {
                    "type": "array",
                    "items": ["http_success_codes[]"],
                    "minItems": 1
                }
            ]
        },
        {
            "title": "Up URL",
            "type": "fieldset",
            "expandable": true,
            "items": [
                {
                    "type": "help",
                    "helpvalue": "<p class='text-muted'><span class='text-info'>%%POS%%</span> can be included in the URL, which will be replaced with the desired target.</p>"
                },
                "up_url.url",
                "up_url.method",
                {
                    "key": "up_url.body",
                    "condition": {
                        "functionBody": "return model.up_url?.method && model.up_url.method !== 'GET'"
                    }
                },
                {
                    "type": "fieldset",
                    "title": "Headers",
                    "expandable": false,
                    "items": [
                        {
                            "type": "div",
                            "displayFlex": true,
                            "flex-direction": "row",
                            "items": [
                                {
                                    "key": "up_url.headers.Authorization",
                                    "flex": "1 1 50px"
                                },
                                {
                                    "key": "up_url.headers.BOND-Token",
                                    "flex": "1 1 50px"
                                }
                            ]
                        }
                    ]
                },
                "up_url.maxAttempts",
                "up_url.retryDelay"
            ]
        },
        {
            "title": "Down URL",
            "type": "fieldset",
            "expandable": true,
            "items": [
                {
                    "type": "help",
                    "helpvalue": "<p class='text-muted'><span class='text-info'>%%POS%%</span> can be included in the URL, which will be replaced with the desired target.</p>"
                },
                "down_url.url",
                "down_url.method",
                {
                    "key": "down_url.body",
                    "condition": {
                        "functionBody": "return model.down_url?.method && model.down_url.method !== 'GET'"
                    }
                },
                {
                    "type": "fieldset",
                    "title": "Headers",
                    "expandable": false,
                    "items": [
                        {
                            "type": "div",
                            "displayFlex": true,
                            "flex-direction": "row",
                            "items": [
                                {
                                    "key": "down_url.headers.Authorization",
                                    "flex": "1 1 50px"
                                },
                                {
                                    "key": "down_url.headers.BOND-Token",
                                    "flex": "1 1 50px"
                                }
                            ]
                        }
                    ]
                },
                "down_url.maxAttempts",
                "down_url.retryDelay"
            ]
        },
        {
            "title": "Stop URL",
            "expandable": true,
            "type": "fieldset",
            "items": [
                "stop_url.url",
                "stop_url.method",
                {
                    "key": "stop_url.body",
                    "condition": {
                        "functionBody": "return model.stop_url?.method && model.stop_url.method !== 'GET'"
                    }
                },
                {
                    "type": "fieldset",
                    "title": "Headers",
                    "expandable": false,
                    "items": [
                        {
                            "type": "div",
                            "displayFlex": true,
                            "flex-direction": "row",
                            "items": [
                                {
                                    "key": "stop_url.headers.Authorization",
                                    "flex": "1 1 50px"
                                },
                                {
                                    "key": "stop_url.headers.BOND-Token",
                                    "flex": "1 1 50px"
                                }
                            ]
                        }
                    ]
                },
                "stop_url.maxAttempts",
                "stop_url.retryDelay",
                {
                    "type": "flex",
                    "flex-flow": "row wrap",
                    "items": [
                        {
                            "key": "trigger_stop_at_boundaries",
                            "condition": {
                                "functionBody": "return model.trigger_stop_at_boundaries || model.stop_url?.url || model.use_same_url_for_stop"
                            }
                        },
                        {
                            "key": "use_same_url_for_stop",
                            "condition": {
                                "functionBody": "return model.use_same_url_for_stop || ((model.down_url?.url || model.up_url?.url) && !model.stop_url.url)"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "title": "Map %%POS%% for URL requests",
            "description": "<i>Map target position specified by %%POS%% or %%POSINT%%% to a new value using JSONata.</i>",
            "type": "fieldset",
            "expandable": true,
            "items": ["send_pos_jsonata"]
        },
        {
            "title": "Position URL",
            "description": "<i>Update position by polling URL</i>",
            "type": "fieldset",
            "expandable": true,
            "items": [
                "pos_url",
                {
                    "key": "pos_poll_ms",
                    "condition": {
                        "functionBody": "return model.pos_poll_ms || model.pos_url"
                    }
                },
                {
                    "key": "pos_jsonata",
                    "condition": {
                        "functionBody": "return model.pos_jsonata || model.pos_url"
                    }
                }
            ]
        },
        {
            "title": "Position Webhook",
            "description": "<i>Update position on ad-hoc basis</i>",
            "type": "fieldset",
            "expandable": true,
            "items": [
                "webhook_port",
                {
                    "type": "help",
                    "helpvalue": "<span class='text-info'>Basic Authentication</span>"
                },
                "webhook_http_auth_user",
                "webhook_http_auth_pass",
                "webhook_https",
                {
                    "key": "webhook_https_keyfile",
                    "condition": {
                        "functionBody": "return model.webhook_https_keyfile || model.webhook_https_certfile || model.webhook_https"
                    }
                },
                {
                    "key": "webhook_https_certfile",
                    "condition": {
                        "functionBody": "return model.webhook_https_certfile || model.webhook_https_keyfile || model.webhook_https"
                    }
                }
            ]
        },
        {
            "title": "Motion Timing",
            "description": "<i>Calibrate blind movement times</i>",
            "type": "fieldset",
            "expandable": true,
            "items": [
                {
                    "key": "motion_time",
                    "condition": {
                        "functionBody": "return !model.motion_time_graph?.up && !model.motion_time_graph?.down"
                    }
                },
                "response_lag_ms",
                {
                    "type": "help",
                    "helpvalue": "<span class='text-info'>motion_time_graph has a higher priority over motion_time. This means, that if these are both explicitly provided in the configuration file, the value set in motion_time will be ignored. A linear rate of change will be assumed between positions and pos = 0 and pos = 100 are required at a minimum.</span>"
                },
                {
                    "key": "motion_time_graph.up",
                    "type": "array",
                    "title": "Motion Timing: Up",
                    "expandable": false,
                    "items": [
                        {
                            "type": "div",
                            "displayFlex": true,
                            "flex-direction": "row",
                            "items": [
                                {
                                    "key": "motion_time_graph.up[].pos",
                                    "flex": "1 1 50px"
                                },
                                {
                                    "key": "motion_time_graph.up[].seconds",
                                    "flex": "1 1 50px"
                                }
                            ],
                            "minItems": 2
                        }
                    ]
                },
                {
                    "key": "motion_time_graph.down",
                    "type": "array",
                    "title": "Motion Timing: Down",
                    "expandable": false,
                    "items": [
                        {
                            "type": "div",
                            "displayFlex": true,
                            "flex-direction": "row",
                            "items": [
                                {
                                    "key": "motion_time_graph.down[].pos",
                                    "flex": "1 1 50px"
                                },
                                {
                                    "key": "motion_time_graph.down[].seconds",
                                    "flex": "1 1 50px"
                                }
                            ],
                            "minItems": 2
                        }
                    ]
                }
            ]
        },
        {
            "type": "fieldset",
            "expandable": true,
            "title": "HomeKit Buttons",
            "items": [
                {
                    "type": "flex",
                    "flex-flow": "row wrap",
                    "items": [
                        {
                            "key": "show_toggle_button",
                            "condition": {
                                "functionBody": "return model.show_toggle_button || (model.up_url?.url && model.down_url?.url)"
                            }
                        },
                        {
                            "key": "show_stop_button",
                            "condition": {
                                "functionBody": "return model.show_stop_button || model.use_same_url_for_stop || model.stop_url?.url"
                            }
                        }
                    ]
                },
                {
                    "type": "array",
                    "items": ["show_favorite_buttons[]"]
                }
            ]
        },
        {
            "title": "Optional Parameters",
            "type": "fieldset",
            "expandable": true,
            "items": ["verbose", "unique_serial"]
        }
    ]
}
